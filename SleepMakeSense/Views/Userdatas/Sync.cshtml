@using SleepMakeSense.Models

@model MyViewModel


@using System.Web.Script.Serialization


@{

    Layout = "~/Views/Shared/_Layout.cshtml";

}

<!DOCTYPE html>

<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <title>Sync</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.5/d3.min.js" charset="utf-8"></script>
    <style type="text/css">
        .axis path, .axis line {
            fill: none;
            stroke: #747F97;
            shape-rendering: crispEdges;
            
        }
        .axis {
            font-size: 14px;
        }
        .x.axis path {
            display: none;
        }

        .tooltip-timeseries {
            
            width: 160px;
            height: 36px;
            padding: 2px;
            font: 12px sans-serif;
            color: white;
            background: -webkit-linear-gradient(141deg, #F74657, #459EE8);
            background: linear-gradient(141deg, #F74657, #459EE8);
            background: -o-linear-gradient(141deg, #F74657, #459EE8);
            background: -moz-linear-gradient(141deg, #F74657, #459EE8);
            border: 0px;
            border-radius: 8px;
            text-align: center;
            pointer-events: none;
            position: absolute;
            
        }

        .tooltip-bubble {
            position: absolute;
            text-align: left;
            width: 200px;
            height: auto;
            padding: 16px;
            font: 12px sans-serif;
            color: white;
            background: -webkit-linear-gradient(141deg, #F74657, #459EE8);
            background: linear-gradient(141deg, #F74657, #459EE8);
            background: -o-linear-gradient(141deg, #F74657, #459EE8);
            background: -moz-linear-gradient(141deg, #F74657, #459EE8);
            border: 6px;
            border-radius: 8px;
            pointer-events: none;
        }
        .tooltip-bubble h4 {
            text-align: left;
            color: white;
            
        }
        svg.bubble {
            padding-right: 15px;
            padding-left: 15px;
            padding-top: 15px;
        }
    </style>
</head>

<body>
    <div id="DataProcessing">
        <script type="text/javascript">

            var factorList = [];
            var cMinutesAsleep = [];
            var cMinutesAwake = [];
            var cAwakeningsCount = [];
            var cMinutesToFallAsleep = [];
            var cSleepEfficiency = [];
            var cWakeUpFresh = [];


            var MinutesAsleep = [];
            var MinutesAwake = [];
            var AwakeningsCount = [];
            var MinutesToFallAsleep = [];
            var SleepEfficiency = [];
            var WakeUpFresh = [];

            var facWidth = 0;
            var facHeight = 0;
            var facCoff = 0;
            var quest2 = false;
            var quest3 = false;

            @if (Model.UserQuestion.Question1 == true)
            {
                @:factorList.push({ Name: "Watch TV", Coefficient: 0.5, Width: facWidth, Height: facHeight, Note: "Watching tv for too long after dark can cause you to havea lack of sleep." });
                            @:facWidth += 160;
            }
            @if (Model.UserQuestion.Question2 == true) {
                @:factorList.push({ Name: "Coffee", Coefficient: 1, Width: facWidth, Height: facHeight, Note: "You Drank 0 Coffee! Coffee can stay in your system for up to 12 hours potentially causing sleep disruption." });
                            @:facWidth += 160;
                        }
            @if (Model.UserQuestion.Question4 == true) {
                @:factorList.push({ Name: "Exercise", Coefficient: 1, Width: facWidth, Height: facHeight, Note: "Exercise is good at making you sleep as well as causing you to sleep in longer." });
                @:facWidth += 160;
                        }
            if (facWidth == 480) {
                facHeight = 110;
                facWidth = 0;
            }
            @if(Model.UserQuestion.Question7 == true)
            {
                @:factorList.push({ Name: "Late Night Snacking", Coefficient: 0.5, Width: facWidth, Height: facHeight, Note: "Eating healthy foods before bed is good for sleep but sugar/junk food before bed is bad for you sleep" });
                @:facWidth += 160;
                        }
            if (facWidth == 320 || 480) {
                facHeight = 110;
                facWidth = 0;
            }
            @if(Model.UserQuestion.Question9 == true)
            {
                @:facWidth += 160;
                @:factorList.push({ Name: "Napping", Coefficient: 0.5, Width: facWidth, Height: facHeight, Note: "Napping close to bed time can cause you to be more restless in your sleep as well as making it hard to fall asleep." });

            }
            if (facWidth == 320 || 480) {
                facHeight = 110;
                facWidth = 0;
            }
            @if(Model.UserQuestion.Question11 == true)
            {
                @:factorList.push({ Name: "Alcohol", Coefficient: 0.5, Width: facWidth, Height: facHeight, Note: "Alcohol can make you more restless during your sleep although making it easier to sleep." });
                            @:facWidth += 160;
                        }
            if (facWidth == 320 || 480) {
                facHeight = 110;
                facWidth = 0;
            }
            @if(Model.UserQuestion.Question12 == true)
            {
                @:factorList.push({ Name: "Part Time Job", Coefficient: 0.5, Width: facWidth, Height: facHeight, Note: "Working late shifts or overnight shifts irregularly will make it harder to go to bed at your usual time." });
                            @:facWidth += 160;
                        }
            if (facWidth == 320 || 480) {
                facHeight = 110;
                facWidth = 0;
            }
            @if(Model.UserQuestion.Question14 == true)
            {
                @:factorList.push({ Name: "Phone", Coefficient: 0.5, Width: facWidth, Height: facHeight, Note: "Using your mobile phone is just as bad as watching TV it messes with the part of your brain telling you its nighttime." });
                            @:facWidth += 160;
                        }
            if (facWidth == 320 || 480) {
                facHeight = 110;
                facWidth = 0;
            }
            @if(Model.UserQuestion.Question15 == true)
            {
                @:factorList.push({ Name: "Diary/Journal", Coefficient: 1, Width: facWidth, Height: facHeight, Note: "Diary/journals can help reduce stress making it easier get to sleep." });
                            @:facWidth += 160;
                        }
            if (facWidth == 320 || 480) {
                facHeight = 110;
                facWidth = 0;
            }
            @if(Model.UserQuestion.Question16 == true)
            {
                @:factorList.push({ Name: "Music", Coefficient: 0.5, Width: facWidth, Height: facHeight, Note: "Listening to relaxing music before bed is good for your sleep but most other kinds of music are bad." });
                            @:facWidth += 160;
                        }
            if (facWidth == 320 || 480) {
                facHeight = 110;
                facWidth = 0;
            }
            @if(Model.UserQuestion.Question17 == true)
            {
                @:factorList.push({ Name: "Social Media", Coefficient: 0.5, Width: facWidth, Height: facHeight, Note: "Research shows that the use of social media during adolescence can affect sleep quality, anxiety and depression. However logging in during the day has less impact on sleep than at night." });
                            @:facWidth += 160;
                        }
            if (facWidth == 320 || 480) {
                facHeight = 110;
                facWidth = 0;
            }
            @if(Model.UserQuestion.Question18 == true)
            {
                @:factorList.push({ Name: "Video Games", Coefficient: 0.5, Width: facWidth, Height: facHeight, Note: "Exposure to too much unnatural light will impact parts of the brain that make us feel sleepy." });
                            @:facWidth += 160;
                        }
            if (facWidth == 320 || 480) {
                facHeight = 110;
                facWidth = 0;
            }
            @if(Model.UserQuestion.Question19 == true)
            {
                @:factorList.push({ Name: "Assignments", Coefficient: 0.5, Width: facWidth, Height: facHeight, Note: "Upcoming exams can cause stress reducing the quality of sleep. Also trying the cram late the night before is bad for your sleep as well as your grades as a good night's sleep will help focusing during an exam." });
                            @:facWidth += 160;
                        }
            if (facWidth == 320 || 480) {
                facHeight = 110;
                facWidth = 0;
            }
            @if(Model.UserQuestion.Question20 == true)
            {
                @:factorList.push({ Name: "Stress", Coefficient: 0.5, Width: facWidth, Height: facHeight, Note: "Anxiety and stress can cause you to take longer to fall asleep, wake up earlier and in general just have a bad night’s sleep." });
                            @:facWidth += 160;
                        }


            /*              factorList.push({ Name: "Late Night Snacking", Coefficient: 1, Width: 0, Height: 0, Note: "Eating healthy foods before bed is good for sleep but sugar/junk food before bed is bad for you sleep" });
              factorList.push({ Name: "Exercise", Coefficient: 1, Width: 160, Height: 0, Note: "Exercise is good for your sleep but try not to push yourself to the point where you are in pain" });
              factorList.push({ Name: "Listening to music", Coefficient: 0.5, Width: 320, Height: 0, Note: "Try to listen to more soothing music before sleeping" });
              factorList.push({ Name: "test", Coefficient: 0.5, Width: 0, Height: 110, Note: "testing 1" });
              factorList.push({ Name: "test 2", Coefficient: 1, Width: 160, Height: 110, Note: "testing 2" });
              //1 = green , 0.5 = 2nd red
              */
            @foreach (SleepMakeSense.Models.CorrList d in Model.CorrCoefficient)
            {

                if (@d.Belong == "MinutesAsleep")
                {
                    @:cMinutesAsleep.push({ Name: "@d.Name", Coefficient: "@d.Coefficient", Width: facWidth, Height: facHeight, Note: "@d.Note" });
                                }
                else if (@d.Belong == "MinutesAwake")
                {
                    var temp = 0 - d.Coefficient;
                    @:cMinutesAwake.push({ Name: "@d.Name", Coefficient: "@temp", Width: facWidth, Height: facHeight, Note: "@d.Note" });
                                }
                else if (@d.Belong == "AwakeningsCount")
                {
                    var temp = 0 - d.Coefficient;
                    @:cAwakeningsCount.push({ Name: "@d.Name", Coefficient: "@temp", Width: facWidth, Height: facHeight, Note: "@d.Note" });
                                }
                else if (@d.Belong == "MinutesToFallAsleep")
                {
                    var temp = 0 - d.Coefficient;
                    @:cMinutesToFallAsleep.push({ Name: "@d.Name", Coefficient: "@temp", Width: facWidth, Height: facHeight, Note: "@d.Note" });
                                }
                else if (@d.Belong == "SleepEfficiency")
                {
                    @:cSleepEfficiency.push({ Name: "@d.Name", Coefficient: "@d.Coefficient", Width: facWidth, Height: facHeight, Note: "@d.Note" });
                                }
                else if (@d.Belong == "WakeUpFreshness")
                {
                    @:cWakeUpFresh.push({ Name: "@d.Name", Coefficient: "@d.Coefficient", Width: facWidth, Height: facHeight, Note: "@d.Note" });
                             }
            }

            @foreach (SleepMakeSense.Models.Userdata d in Model.AllData)
            {
                    var dateOnly = d.DateStamp.ToShortDateString();
                    var weekday = d.DateStamp.DayOfWeek;

                    @:MinutesAsleep.push({ Date: "@dateOnly", Day: "@weekday", Value: "@d.MinutesAsleep" });
                                @:MinutesAwake.push({ Date: "@dateOnly", Day: "@weekday", Value: "@d.MinutesAwake" });
                                @:AwakeningsCount.push({ Date: "@dateOnly", Day: "@weekday", Value: "@d.AwakeningsCount" });
                                @:MinutesToFallAsleep.push({ Date: "@dateOnly", Day: "@weekday", Value: "@d.MinutesToFallAsleep" });
                                @:SleepEfficiency.push({ Date: "@dateOnly", Day: "@weekday", Value: "@d.SleepEfficiency" });
                                @:WakeUpFresh.push({ Date: "@dateOnly", Day: "@weekday", Value: "@d.WakeUpFreshness" });

             }

            alert("Your Fitbit data synced! Visualize your personal sleep affecting factors now.");

            function processData(data) {
                return { children: data };
            }

            function testVis(mydata, section, textp, sfeature) {

                var width = 500, height = 300;
                format = d3.format(",d");

                var svg = d3.select(section).append("svg")
                 .attr("width", width)
                 .attr("height", height)
                  .attr("class", "bubble");

                var legend_data = [
                { "color": "#459EE8", "text": "good" }, //Very strong positive relationship
               /* { "color": "#99FF99", "text": "Strong positive relationship" },
                { "color": "#CCFFCC", "text": "Moderate positive relationship" },
                { "color": "#F6CED8", "text": "Moderate negative relationship" },
                { "color": "#F7819F", "text": "Strong negative relationship" },*/
                { "color": "#F74657", "text": "bad" }]; //Very strong negative relationship

                if (mydata.length == 0) {
                    document.getElementById(textp).innerText = "None of the tracked factors seems to impact your " + sfeature + ". We havn't found any connections in your data, please give us more infomation.";
                } else {

                    var div = d3.select(section).append("div")
                         .attr("class", "tooltip-bubble")
                        .style("opacity", 0);

                    var bubble = d3.layout.pack()
                    .size(100, 50).padding(function (d) { return d.width; })
                    //.value(function (d) { temp = Math.abs(d.Coefficient); if (temp >= 0) { return temp; } })
                    //.padding(50); // padding between adjacent bubbles

                    var nodes = bubble.nodes(processData(mydata)).filter(function (d) { return !d.children; });
                    var vis = svg.selectAll("g.node").data(nodes);

                    var visEnter = vis.enter().append("g")
                    .attr("class", "node")
                    .attr('width', 150)
                    .attr('height', 100);

                    var circles = visEnter.append("rect")
                    //.attr("r", function (d) { return d.r; })
                    //.attr("r", 60)
                    .attr("x", function (d) { return d.Width })
                    .attr("y", function (d) { return d.Height })
                    //.transition().duration(500)
                    .attr('width', 155)
                    .attr('height', 105)
                    .style("fill", "#2C3041")

                    .on("mouseover", function (d) {
                        d3.select(this)
                            .style("stroke", "#373E4F")
                            .style("stroke-width", 3)
                            .style("cursor", "pointer");
                        div.transition()
                            .duration(100)
                            .style("opacity", 1);

                        div.html("<h4><center>" + d.Name + "</h4>" + d.Note)
                              .style("left", 170 + "px")
                              .style("top", -100 + "px");
                        //.style("top", function (d) {
                        //return (this.y - 300) + "px";
                        //return this.y + "px";
                        //})
                    })
                        .on("mouseout", function (d) {
                            d3.select(this)
                               .style("stroke", "#373E4F")
                               .style("stroke-width", 1);
                            div.transition()
                                .duration(100)
                                .style("opacity", 0);
                        });

                    visEnter.append("text")
                    .style("text-anchor", "middle")
                    .attr("x", function (d) {
                        if (d.Width == 0) {
                            return 75;
                        } else if (d.Width == 160) {
                            return 235;
                        } else {
                            return 395;
                        }
                    })
                    .style("fill", function (d) {
                        coeff = d.Coefficient;
                        console.log(coeff);
                        /*if (coeff < 0) {
                            temp = Math.abs(coeff);
                            if ((temp >= 0.8) && (temp <= 1.0)) { return "#F74657"; }
                            else if ((temp < 0.8) && (temp >= 0.5)) { return "#F74657"; }
                            else if ((temp < 0.5) && (temp >= 0.3)) { return "#F74657"; }
                        } else */if (coeff >= 0) {
                            if ((coeff >= 0.8) && (coeff <= 1.0)) { return "#459EE8"; }
                            else if ((coeff < 0.8) && (coeff >= 0.5)) { return "#F74657"; }  //#99FF99
                            //else if ((coeff < 0.5) && (coeff >= 0.3)) { return "#CCFFCC"; }
                        }
                    })
                    .attr("y", function (d) {
                        if (d.Height != 0) {
                            return 160;
                        } else {
                            return 50;
                        }
                    })
                    .attr("dy", ".3em")
                    //.style("alignment-baseline", "middle")
                    //.style("text-anchor", "middle")
                    .text(function (d) { return d.Name; });
                    //.attr("x", function (d) { return d.width / 2 })
                    //.attr("y", function (d) { return d.height / 2 });

                    /* var legend = svg.selectAll(".legend")
                         .data(legend_data)
                       .enter().append("g")
                         .attr("class", "legend")
                         .attr("transform", function (d, i) { return "translate(0," + i * 20 + ")"; });

                     legend.append("rect")
                         .attr("x", width - 170)
                         .attr("y", 135)
                         .attr("width", 18)
                         .attr("height", 18)
                         .style("fill", function (d) { return d.color; });

                     legend.append("text")
                         .attr("x", width - 170)
                         .attr("y", 135)
                         .attr("dy", ".35em")
                         .style("text-anchor", "start")
                         .text(function (d) { return d.text; }); */
                }
            }

            function minTohr(minutes) {
                var hours = Math.floor(Math.abs(minutes) / 60);
                var minutes = Math.abs(minutes) % 60;
                return hours + 'hrs' + minutes + 'min';
            }


            function PlotTimeseries(myData, section, mark, sFeature) {

                d3.select(section).selectAll("*").remove();
                var red = "#F74657";
                var blue = "#459EE8";

                var w = 500;
                var h = 300;
                var margin = { top: 30, right: 20, bottom: 50, left: 40 };
                width = w - margin.left - margin.right,
                height = h - margin.top - margin.bottom;
                parseDate = d3.time.format("%d/%m/%Y").parse;

                var chart = d3.select(section).append("svg")
              .attr("width", w)
              .attr("height", h)
              .append("g")
              .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

                myData.forEach(function (d) {
                    d.Date = parseDate(d.Date);
                    if (mark == "MinutesAsleep") { d.Value = +(d.Value / 60); }
                    else d.Value = +d.Value;
                });

                var xRange = d3.scale.ordinal().rangeRoundBands([0, width], 0.2);

                var yRange = d3.scale.linear().range([height, 0]);

                var xAxis = d3.svg.axis()
                              .scale(xRange)
                              .orient("bottom")
                              .ticks(8)
                              .tickFormat(d3.time.format("%d/%m"));

                var yAxis = d3.svg.axis()
                              .scale(yRange)
                              .orient("left")
                              .ticks(5);

                xRange.domain(myData.map(function (d) { return d.Date; }));
                yRange.domain([0, d3.max(myData, function (d) { return d.Value; })]);

                chart.append("g")
                    .attr("class", "x axis")
                    .attr("transform", "translate(0," + height + ")")
                    .call(xAxis)
                    .selectAll("text")
                    .style("text-anchor", "end")
                    .attr("dx", "-.8em")
                    .attr("dy", "-.55em")
                    .attr("transform", "rotate(-90)");

                chart.append("g")
                    .attr("class", "y axis")
                    .call(yAxis)
                    .append("text")
                    .attr("transform", "rotate(-90)")
                    .attr("y", 6)
                    .attr("dy", ".71em")
                    .style("text-anchor", "end")
                    .text(sFeature);




                var div = d3.select(section).append("div")
                            .attr("class", "tooltip-timeseries")
                            .style("opacity", 0);

                var formatTime = d3.time.format("%b %e");

                chart.selectAll("rect")
                     .data(myData)
                     .enter().append("rect")
                     .attr("class", "bar")
                     .attr("x", function (d) { return xRange(d.Date); })
                     .attr("width", xRange.rangeBand())
                     .attr("y", function (d) { return yRange(d.Value); })
                     .attr("height", function (d) { return (height - yRange(d.Value)); })
                     //.attr("fill", "#0000ff")
                     .attr("fill", function (d) {
                         if (mark == "SleepEfficiency" && (d.Value < 95)) { return red; }
                             //else if (mark == "MinutesToFallAsleep" && (d.Value > 30)) { return red; }
                         else if (mark == "MinutesAsleep" && (d.Value < 8)) { return red; }
                         else if (mark == "MinutesAsleep" && (d.Value > 10)) { return red; }
                         else if (mark == "MinutesAwake" && (d.Value > 27)) { return red; } // 0.05*540 min
                         else return blue;
                     })
                     .on("mouseover", function (d) {
                         var matrix = this.getScreenCTM()
                            .translate(+this.getAttribute("cx"), +this.getAttribute("cy"));

                         d3.select(this)
                           .attr("fill", "#747F97");

                         div.transition()
                            .duration(200)
                            .style("opacity", 0.9);

                         if (mark == "SleepEfficiency") { tooltiptext = formatTime(d.Date) + " (" + d.Day + ")" + "<br/>" + d.Value + "%"; }
                             //else if (mark == "MinutesToFallAsleep") { tooltiptext = formatTime(d.Date) + " (" + d.Day + ")" + "<br/>" + d.Value + " min"; }
                         else if (mark == "MinutesAwake") { tooltiptext = formatTime(d.Date) + " (" + d.Day + ")" + "<br/>" + d.Value + " min"; }
                         else if (mark == "AwakeningsCount") { tooltiptext = formatTime(d.Date) + " (" + d.Day + ")" + "<br/>" + d.Value + " awakenings/restlessness"; }
                         else if (mark == "MinutesAsleep") {
                             minutes = d.Value * 60;
                             mh = minTohr(minutes);
                             tooltiptext = formatTime(d.Date) + " (" + d.Day + ")" + "<br/>" + mh;
                         } else { tooltiptext = formatTime(d.Date) + " (" + d.Day + ")" + "<br/>" + d.Value; }


                         div.html(tooltiptext)
                            //.style("left", (d3.event.pageX - 34) + "px")
                            //.style("top", (d3.event.pageY - 12) + "px");
                            .style("left", (window.pageXOffset + matrix.e + 15) + "px")
                            .style("top", (window.pageYOffset + matrix.f - 30) + "px");
                         // Need a better solution here!!



                     })
                     .on("mouseout", function (d) {
                         d3.select(this)
                           //.attr("fill", "#bdbdbd");
                           .attr("fill", function (d) {
                               if (mark == "SleepEfficiency" && (d.Value < 95)) { return red; }
                                   //else if (mark == "MinutesToFallAsleep" && (d.Value > 30)) { return red; }
                               else if (mark == "MinutesAsleep" && ((d.Value > 10) || (d.Value < 8))) { return red; }
                               else if (mark == "MinutesAwake" && (d.Value > 27)) { return red; } // 0.05*540 min
                               else return blue;
                           });
                         div.transition()
                            .duration(500)
                            .style("opacity", 0);
                     });
            }
        </script>
    </div>
<div class="container">
    <div class="row">
        <div class="col-md-12">
            <h2> My Sleep Data </h2>
            <hr/>
        </div>
    </div>
    
        <div class="tabbable">
            <div class="row">
                <div class="col-md-12">
                    <ul class="nav nav-tabs" id="mytab">
                        <li class="active"><a class="MinutesAsleepTimeseries" href="#MinutesAsleepTimeseries" data-toggle="tab">Hours Asleep</a></li>
                        <li><a class="MinutesAwakeTimeseries" href="#MinutesAwakeTimeseries" data-toggle="tab">Minutes Restless</a></li>
                        <li><a class="SleepEfficiencyTimeseries" href="#SleepEfficiencyTimeseries" data-toggle="tab">Sleep Efficiency</a></li>

                    </ul>
                </div>
            </div>

            <div class="row">
                <div class="col-md-3 col-md-offset-6">
                    <ul class="legend">
                        <li><span class="good"></span>good</li>
                        <li><span class="bad"></span>bad</li>
                    </ul>
                </div>
            </div>

            <div class="im-centered">
                <div class="tab-content">
                    <div class="tab-pane active fade in" id="MinutesAsleepTimeseries">
                        <div id="MinutesAsleepTimeseries">
                            <script type="text/javascript">
                                PlotTimeseries(MinutesAsleep, "#MinutesAsleepTimeseries", "MinutesAsleep", "Hours");
                            </script>
                        </div>
                        
                        
                        <div class="row">
                            <div class="col-md-12">
                                <div id="AffectingFactorsMinutesAsleep">
                                    <script type="text/javascript">
                        testVis(cMinutesAsleep, "#AffectingFactorsMinutesAsleep", "AffectingFactorsMinutesAsleep", "MinutesAsleep");
                                    </script>
                                </div>
                            </div>
                        </div>

                    </div>
                    <div class="tab-pane fade" id="MinutesAwakeTimeseries">
                        <div id="MinutesAwakeTimeseries">
                            <script type="text/javascript">
                                PlotTimeseries(MinutesAwake, "#MinutesAwakeTimeseries", "MinutesAwake", "Mins");
                            </script>
                        </div>
                        
                            <div class="row">
                                <div class="col-md-12">
                                    <div id="AffectingFactorsMinutesAwake">
                                        <script type="text/javascript">
                                            testVis(cMinutesAwake, "#AffectingFactorsMinutesAwake", "AffectingFactorsMinutesAwake", "MinutesAwake");
                                        </script>
                                    </div>
                                </div>
                            </div>
                            
                    </div>
                    <div class="tab-pane fade" id="SleepEfficiencyTimeseries">
                        <div id="SleepEfficiencyTimeseries">
                            <script type="text/javascript">
                        PlotTimeseries(SleepEfficiency, "#SleepEfficiencyTimeseries", "SleepEfficiency", "%");
                            </script>
                        </div>
                                <div class="row">
                                    <div class="col-md-12">
                                        <div id="AffectingFactorsSleepEfficiency">
                                            <script type="text/javascript">
                                                testVis(cMinutesToFallAsleep, "#AffectingFactorsSleepEfficiency", "AffectingFactorsSleepEfficiency", "SleepEfficiency");
                                            </script>
                                        </div>
                                    </div>
                                </div>
                    </div>
                </div>
            </div>
        </div>


    <!--div class="row">
        <h4> Awakening Count </h4>
        <h6> My awakening count </h6>
    </!--div>
    <div class="row">
        <div class="col-md-6">
            <div id="AwakeningsCountTimeseries">
                <script type="text/javascript">
                    PlotTimeseries(AwakeningsCount, "#AwakeningsCountTimeseries", "AwakeningsCount", "Awakenings Count");
                </script>
            </div>
        </div>
        <div class="col-md-6">
            <div id="AffectingFactorsAwakeningsCount">
                <script type="text/javascript">
                    testVis(cAwakeningsCount, "#AffectingFactorsAwakeningsCount", "AffectingFactorsAwakeningsCount", "AwakeningsCount");
                </script>
            </div>
        </div>
    </div> <hr />
    <div class="im-centered">
        <div class="row">
        <div class="col-md-6">
            <h4>Minutes To Fall Asleep </h4>
            <h6> time to fall asleep </h6>
        </div>
        <div class="col-md-6">
            <ul class="legend">
                <li><span class="good"></span>good</li>
                <li><span class="bad"></span>bad</li>
            </ul>
        </div>
        </div>
    </div>
    <div class="im-centered">
        <div class="row">
            <div class="col-md-6">
                <div id="MinutesToFallAsleepTimeseries">
                    <script type="text/javascript">
                        PlotTimeseries(MinutesToFallAsleep, "#MinutesToFallAsleepTimeseries", "MinutesToFallAsleep", "Time to fall asleep (min)");
                    </script>
                </div>
            </div>
        </div>
    </div>
    <div class="im-centered">
        <div class="row">
            <div class="col-md-12">
                <div id="AffectingFactorsMinutesToFallAsleep">
                    <script type="text/javascript">
                        testVis(cMinutesToFallAsleep, "#AffectingFactorsMinutesToFallAsleep", "AffectingFactorsMinutesToFallAsleep", "MinutesToFallAsleep");
                    </script>
                </div>
            </div>
        </div>
    </div> <hr /-->
 <hr />

    <div style="color:#3376bf">
        <h5> 
            <b>
                @*<a href="/Userdatas/FactorList" class="btn btn-primary">Explore other factors that may impact your sleep &raquo; </a>
                <a href="@Url.Action("FactorList", "Userdatas")" class="elements"><span>Explore other factors that may affect your sleep &raquo; </span></a>*@
            </b>
        </h5>
     </div>
</div>
    <script>
    $('#mytab a').click(function (e) {
      e.preventDefault();
      $(this).tab('show');
    })
    </script>
</body>
</html>
